import PyPDF2
import re
import sys
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

def extract_text_from_pdf(pdf_path):
    text = ""
    with open(pdf_path, 'rb') as file:
        reader = PyPDF2.PdfReader(file)
        for page in reader.pages:
            extracted_text = page.extract_text()
            if extracted_text:
                text += extracted_text + "\n"
    return text

def parse_treatment_plan(text):
    procedure_pattern = r"(?P<procedure>.+?)\s+\$(?P<fee>\d+\.\d{2})\s+\$(?P<insurance>\d+\.\d{2})\s+\$(?P<patient_portion>\d+\.\d{2})"
    matches = re.finditer(procedure_pattern, text)
    
    parsed_data = []
    for match in matches:
        parsed_data.append({
            'Procedure': match.group('procedure').strip(),
            'Fee': float(match.group('fee')),
            'Insurance Covers': float(match.group('insurance')),
            'Your Cost': float(match.group('patient_portion')),
        })
    return parsed_data

def save_to_pdf(data, output_path):
    c = canvas.Canvas(output_path, pagesize=letter)
    width, height = letter
    c.setFont("Helvetica-Bold", 14)
    c.drawCentredString(width / 2, height - 50, "Reformatted Treatment Plan")
    
    y_position = height - 80
    c.setFont("Helvetica-Bold", 10)
    headers = ["Procedure", "Fee", "Insurance Covers", "Your Cost"]
    x_positions = [50, 250, 350, 450]
    
    for i, header in enumerate(headers):
        c.drawString(x_positions[i], y_position, header)
    y_position -= 20
    
    c.setFont("Helvetica", 10)
    for entry in data:
        c.drawString(x_positions[0], y_position, entry['Procedure'][:30])
        c.drawString(x_positions[1], y_position, f"${entry['Fee']:.2f}")
        c.drawString(x_positions[2], y_position, f"${entry['Insurance Covers']:.2f}")
        c.drawString(x_positions[3], y_position, f"${entry['Your Cost']:.2f}")
        y_position -= 20
        if y_position < 50:
            c.showPage()
            c.setFont("Helvetica", 10)
            y_position = height - 80
    
    y_position -= 30
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, y_position, "Payment Plan Options")
    y_position -= 20
    
    c.setFont("Helvetica", 10)
    c.drawString(50, y_position, "We offer flexible financing through Cherry, a third-party provider offering 0% interest financing for up to 12 months.")
    y_position -= 20
    
    total_cost = sum(item['Your Cost'] for item in data)
    if total_cost > 0:
        c.drawString(50, y_position, f"- 3 Months: ${total_cost / 3:.2f} per month")
        y_position -= 15
        c.drawString(50, y_position, f"- 6 Months: ${total_cost / 6:.2f} per month")
        y_position -= 15
        c.drawString(50, y_position, f"- 12 Months: ${total_cost / 12:.2f} per month")
        y_position -= 25
    
    c.drawString(50, y_position, "To apply for Cherry financing, scan the QR code or contact BU Dental at (925) 687-0343.")
    c.save()

def main():
    if len(sys.argv) < 3:
        print("Error: Missing arguments. Usage: python script.py <PDF input path> <PDF output path>")
        sys.exit(1)
    
    pdf_path = sys.argv[1]
    output_path = sys.argv[2]

    print("Extracting text from PDF...")
    text = extract_text_from_pdf(pdf_path)
    
    print("Parsing treatment plan data...")
    parsed_data = parse_treatment_plan(text)
    
    if not parsed_data:
        print("Error: No treatment plan data found in the PDF.")
        sys.exit(1)
    
    print("Saving reformatted data to PDF...")
    save_to_pdf(parsed_data, output_path)
    
    print(f"Reformatted treatment plan saved to {output_path}")

if __name__ == "__main__":
    main()
